import time
import smbus2
import bme280

import serial
import pynmea2


from w1thermsensor import W1ThermSensor
sensor = W1ThermSensor()


import RPi.GPIO as GPIO

# Set the GPIO mode to BCM (Broadcom SOC channel numbering)
GPIO.setmode(GPIO.BCM)

# Set the pin number connected to the ir obstacle avoidance sensor
SENSOR_PIN = 12

# Set the GPIO pin as an input
GPIO.setup(SENSOR_PIN, GPIO.IN)


# BME280 sensor address (default address)
address = 0x76

# Initialize I2C bus
bus = smbus2.SMBus(1)

# Load calibration parameters
calibration_params = bme280.load_calibration_params(bus, address)

def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32

while True:
    try:
        # Read sensor data
        data = bme280.sample(bus, address, calibration_params)

        # Extract temperature, pressure, and humidity
        temperature_celsius = data.temperature
        pressure = data.pressure
        humidity = data.humidity

        # Convert temperature to Fahrenheit
        temperature_fahrenheit = celsius_to_fahrenheit(temperature_celsius)

        temperature = sensor.get_temperature()
        print("\nThe temperature is %s celsius" % temperature)
        time.sleep(1)

        # Print the readings
        print("\nTemperature: {:.2f} C, {:.2f} F".format(temperature_celsius, temperature_fahrenheit))
        print("Pressure: {:.2f} hPa".format(pressure))
        print("Humidity: {:.2f} %".format(humidity))

        # Wait for a few seconds before the next reading
        time.sleep(2)
        
        port="/dev/ttyAMA0"
        ser=serial.Serial(port, baudrate=9600, timeout=0.5)
        dataout = pynmea2.NMEAStreamReader()
        newdata=ser.readline()
        n_data = newdata.decode('latin-1')
        if n_data[0:6] == '$GPRMC':
                newmsg=pynmea2.parse(n_data)
                lat=newmsg.latitude
                lng=newmsg.longitude
                gps = "\nLatitude=" + str(lat) + " and Longitude=" + str(lng)
                print(gps+"\n")
                
                
        # Read the state from the ir obstacle avoidance sensor
        obstacle_state = GPIO.input(SENSOR_PIN)
        
        # The ir obstacle avoidance sensor outputs LOW (0) when obstacle is present, otherwise HIGH (1)
        if obstacle_state == GPIO.LOW:
            print("The obstacle is present")
        else:
            print("The obstacle is NOT present")

    except KeyboardInterrupt:
        print('Program stopped')
        break
    except Exception as e:
        print('An unexpected error occurred:', str(e))
        break
