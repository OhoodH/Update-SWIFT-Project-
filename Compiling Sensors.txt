import time
import smbus2
import bme280

import serial
import pynmea2


from w1thermsensor import W1ThermSensor
sensor = W1ThermSensor()


import RPi.GPIO as GPIO

# Set the GPIO mode to BCM (Broadcom SOC channel numbering)
GPIO.setmode(GPIO.BCM)

# Set the pin number connected to the ir obstacle avoidance sensor
SENSOR_PIN = 12

# Set the GPIO pin as an input
GPIO.setup(SENSOR_PIN, GPIO.IN)


# BME280 sensor address (default address)
address = 0x76

# Initialize I2C bus
bus = smbus2.SMBus(1)

# Load calibration parameters
calibration_params = bme280.load_calibration_params(bus, address)

def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32

while True:
    try:
        # Read sensor data
        data = bme280.sample(bus, address, calibration_params)

        # Extract temperature, pressure, and humidity
        temperature_celsius = data.temperature
        pressure = data.pressure
        humidity = data.humidity

        # Convert temperature to Fahrenheit
        temperature_fahrenheit = celsius_to_fahrenheit(temperature_celsius)

        temperature = sensor.get_temperature()
        print("\nThe temperature is %s celsius" % temperature)
        time.sleep(1)

        # Print the readings
        print("\nTemperature: {:.2f} C, {:.2f} F".format(temperature_celsius, temperature_fahrenheit))
        print("Pressure: {:.2f} hPa".format(pressure))
        print("Humidity: {:.2f} %".format(humidity))

        # Wait for a few seconds before the next reading
        time.sleep(2)
        
        port="/dev/ttyAMA0"
        ser=serial.Serial(port, baudrate=9600, timeout=0.5)
        dataout = pynmea2.NMEAStreamReader()
        newdata=ser.readline()
        n_data = newdata.decode('latin-1')
        if n_data[0:6] == '$GPRMC':
                newmsg=pynmea2.parse(n_data)
                lat=newmsg.latitude
                lng=newmsg.longitude
                gps = "\nLatitude=" + str(lat) + " and Longitude=" + str(lng)
                print(gps+"\n")
                
                
        # Read the state from the ir obstacle avoidance sensor
        obstacle_state = GPIO.input(SENSOR_PIN)
        
        # The ir obstacle avoidance sensor outputs LOW (0) when obstacle is present, otherwise HIGH (1)
        if obstacle_state == GPIO.LOW:
            print("The obstacle is present")
        else:
            print("The obstacle is NOT present")

    except KeyboardInterrupt:
        print('Program stopped')
        break
    except Exception as e:
        print('An unexpected error occurred:', str(e))
        break

عهود ., [17/10/45 02:11 م]
prediction  YOLO follows these steps to predict bounding boxes and class 
probabilities for objects, in an image:
1. The input image is resized to a fixed size.
2. The network performs forward propagation to generate a prediction map.
3. The prediction map is then decoded to obtain the bounding box positions and class 
probabilities.
4. The system filters the bounding boxes by applying a threshold to the score. Then it applies 
maximum suppression to eliminate any duplicate detections. Only bounding boxes with a 
score than a certain threshold is considered as valid detections. After filtering and applying 
maximum suppression, the remaining bounding boxes represent the final detections .

# Evaluation Indicators To measure the performance of the YOLO algorithm :
• (IOU)
Intersection over Union: IOU measures the overlap between predicted bounding boxes and ground 
truth boxes, with scores ranging from 0 to 1. A higher IOU score indicates a better overlap, and a 
score of 1 indicates a perfect overlap.
IOU = (Area of intersection) / (Area of union) 
Area of intersection is the area of the overlap between the predicted and ground truth bounding 
boxes. Area of union is the area of the union of the predicted and ground truth bounding boxes.
## (AP)
Average Precision (AP): AP measures the precision of object detection at various levels of recall. 
It is computed by calculating the precision and recall values at different IoU thresholds and then 
averaging them. AP is often reported at different IoU thresholds, such as AP@[0.5:0.95], which 
represents the average AP across a range of IoU thresholds.

## (mAP)
Mean Average Precision: mAP is the average of AP values across multiple object classes. It 
provides an overall performance measure for object detection across different categories. 

## (Precision and Recall)
Precision and Recall: Precision is the probability of all predicted positive samples among the actual 
positive samples and is used to measure the prediction accuracy of positive sample results. Recall 
is the probability of actual positive samples being predicted as positive samples, which indicates 
the overall prediction accuracy. Both are calculated as follows:

Where: True Positives (TP), False Positives (FP), True Negatives (TN), and False Negatives (FN)
Precision reflects the ability of the model to discriminate negative samples. The higher the 
precision, the better the model's ability to discriminate negative samples. Recall reflects the 
model's ability to identify positive samples. The higher the recall, the better the ability of the model 
to identify positive samples.